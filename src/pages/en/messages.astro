---
import BaseLayout from '../../layouts/BaseLayout.astro';
import MessagesInterface from '../../components/messages/MessagesInterface';
---

<BaseLayout 
  title="Messages - ZH-Love"
  description="Message inbox in ZH-Love community"
>
  <div class="min-h-screen bg-background">
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-3xl font-bold text-white">Messages</h1>
        <button 
          id="new-message-btn"
          class="px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors flex items-center space-x-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          <span>New Message</span>
        </button>
      </div>

      <!-- Messages Interface -->
      <MessagesInterface client:load />
    </div>
  </div>

  <!-- New Message Modal -->
  <div id="new-message-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-card border border-border rounded-lg max-w-md w-full p-6">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">New Message</h2>
          <button 
            id="close-modal"
            class="text-gray-400 hover:text-white transition-colors"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="new-message-form" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              To
            </label>
            <input 
              type="text" 
              id="recipient-input"
              class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="Username or email"
              required
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              Subject
            </label>
            <input 
              type="text" 
              id="subject-input"
              class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="Message subject"
              required
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              Message
            </label>
            <textarea 
              id="message-input"
              rows="4"
              class="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-green-500 resize-none"
              placeholder="Write your message here..."
              required
            ></textarea>
          </div>

          <div class="flex justify-end space-x-4">
            <button 
              type="button"
              id="cancel-btn"
              class="px-4 py-2 text-gray-400 hover:text-white transition-colors"
            >
              Cancel
            </button>
            <button 
              type="submit"
              class="px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
            >
              Send
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const newMessageBtn = document.getElementById('new-message-btn');
      const newMessageModal = document.getElementById('new-message-modal');
      const closeModalBtn = document.getElementById('close-modal');
      const cancelBtn = document.getElementById('cancel-btn');
      const newMessageForm = document.getElementById('new-message-form');

      // Open modal
      newMessageBtn?.addEventListener('click', function() {
        newMessageModal?.classList.remove('hidden');
      });

      // Close modal
      const closeModal = () => {
        newMessageModal?.classList.add('hidden');
        newMessageForm?.reset();
      };

      closeModalBtn?.addEventListener('click', closeModal);
      cancelBtn?.addEventListener('click', closeModal);

      // Close modal when clicking outside
      newMessageModal?.addEventListener('click', function(e) {
        if (e.target === newMessageModal) {
          closeModal();
        }
      });

      // Submit form
      newMessageForm?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const recipient = document.getElementById('recipient-input').value;
        const subject = document.getElementById('subject-input').value;
        const message = document.getElementById('message-input').value;

        try {
          const token = localStorage.getItem('zh_love_token');
          const response = await fetch('http://localhost:8080/api/messages/send', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              recipient,
              subject,
              message
            })
          });

          if (response.ok) {
            closeModal();
            window.location.reload();
          } else {
            const errorData = await response.json();
            alert(errorData.message || 'Error sending message');
          }
        } catch (error) {
          console.error('Error sending message:', error);
          alert('Error sending message');
        }
      });
    });
  </script>
</BaseLayout> 